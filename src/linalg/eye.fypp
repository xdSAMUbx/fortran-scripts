#:set types = [('r','real','real64'),('i','integer','int32')]
module mod_eye
   use iso_fortran_env
   implicit none
   interface eye
#: for prefix, ftyp, kind in types
      module procedure eye${prefix}$
#: endfor
   end interface eye
   contains
#: for prefix, ftype, kind in types
   function eye${prefix}$(n) result(mat)
   integer :: i
   ${ftype}$(${kind}$), intent(in) :: n
   ${ftype}$(${kind}$), allocatable :: mat(:,:)
#: if ftype == 'real'
   allocate(mat(int(n),int(n)))
   mat = 0
   do concurrent (i = 1 : int(n))
      mat(i,i) = 1.0
   end do
#: else
   allocate(mat(n,n))
   mat = 0
   do concurrent (i = 1 : n)
      mat(i,i) = 1
   end do
#: endif
   end function eye${prefix}$
#: endfor
end module mod_eye
